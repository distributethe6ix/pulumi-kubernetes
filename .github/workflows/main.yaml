##################################################################################
# References:
#   Built-in arguments:
#   - https://docs.github.com/en/actions/learn-github-actions/contexts
#   Built-in environment variables:
#   - https://docs.github.com/en/enterprise-cloud@latest/actions/learn-github-actions/variables#default-environment-variables
#
# Develop this workflow locally with the following command:
#   ~$ gh extension install nektos/gh-act
#   ~$ gh act --env-file .env -s GITHUB_TOKEN=$GITHUB_TOKEN -s PULUMI_ACCESS_TOKEN=$PULUMI_ACCESS_TOKEN

name: CI Test Workflow
on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths-ignore:
    - '.devcontainer/**'
    - '.vscode/**'
    - '**.md'
  pull_request:
    branches:
    - main
    paths-ignore:
    - '.devcontainer/**'
    - '.vscode/**'
    - '**.md'
  schedule:
  - cron: '0 0 * * 0'

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      uid: ${{ steps.set_vars.outputs.uid }}
      gid: ${{ steps.set_vars.outputs.gid }}
    steps:
    - id: set_vars
      run: |
        echo "::set-output name=uid::$(id -u)"
        echo "::set-output name=gid::$(id -g)"
    - id: get_vars
      run: |
        echo "UID=$(echo ${{ steps.set_vars.outputs.uid }})" | tee -a ${GITHUB_ENV}
        echo "GID=$(echo ${{ steps.set_vars.outputs.gid }})" | tee -a ${GITHUB_ENV}
        echo "whoami = $(whoami)"
        echo "groups = $(groups)"
        echo "UID=$UID"
        echo "GID=$GID"

  configure:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    container:
      image: ghcr.io/containercraft/konductor:latest
      options: --user 1001:127 --privileged --cpus 4 --memory 8g --workdir ${{ github.workspace }} --volume="/etc/group:/etc/group:ro" --volume="/etc/passwd:/etc/passwd:ro" --volume="/etc/shadow:/etc/shadow:ro"
#     options: --user ${{ needs.setup.outputs.uid }}:${{ steps.set_vars.outputs.gid }} --privileged --cpus 4 --memory 8g --workdir ${{ github.workspace }}
    steps:

    - name: "Set User:Group Ownership"
      run: set -ex; sudo chown -R $USER:$USER $GITHUB_WORKSPACE

    - name: dbg1
      id: dbg1
      run: |
        echo "-----------------------------------";\
        echo dbg1.0
        git status || true;\
        echo "whoami = $(whoami)";\
        echo "groups = $(groups)";\
        echo "[user_id:group] [$(id -u):$(id -g)]";\
        cat /etc/passwd | grep $(whoami);\
        sudo tree -a $WORKSPACE || true;\
        echo pwd;\
        $(pwd);\
        echo "ls -lah";\
        ls -lah . ;\
        tree . -a -I .git -I .devcontainer -I node_modules;\
        echo "change dir to WORKSPACE"
        cd $WORKSPACE;\
        echo pwd;\
        $(pwd);\
        echo "ls -lah";\
        ls -lah . ;\
        tree . -a -I .git -I .devcontainer -I node_modules;\
        echo "-----------------------------------";\

# build:
#   runs-on: ubuntu-latest
#   permissions:
#     actions: write
#     packages: write
#     contents: read
#   defaults:
#     run:
#       shell: bash
#   env:
#     WORKSPACE: ${{ github.workspace }}
#   container:
#     image: ghcr.io/containercraft/konductor:latest
#     options: --user ${{ env.UID }}:${{ env.GID }} --privileged --cpus 4 --memory 8g --workdir ${{ github.workspace }}

#   steps:

#   - name: Ammend Environment Variables
#     id: environment
#     run: echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F [\/] '{print $1}')" | tee -a ${GITHUB_ENV};\

#   - name: Git Checkout
#     uses: actions/checkout@v4
#     with:
#       # Add repository path as safe.directory for Git global config by running `git
#       # config --global --add safe.directory <path>`
#       repository: ${{ github.repository }}
#       set-safe-directory: 'true'
#       fetch-depth: '1'
#       submodules: 'recursive'
#       fetch-tags: 'true'
#       clean: 'true'
#       path: ${{ github.workspace }}

#   - name: dbg2
#     id: dbg2
#     run: |
#       echo "-----------------------------------";\
#       echo;\
#       echo dbg2.0
#       git status || true;\
#       echo "whoami = $(whoami)";\
#       echo "groups = $(groups)";\
#       echo "[user_id:group] [$(id -u):$(id -g)]";\
#       cat /etc/passwd | grep $(whoami);\
#       sudo tree -a $WORKSPACE || true;\
#       echo;
#       echo "-----------------------------------";\
#       echo;\
#       echo dbg2.1;\
#       pwd;\
#       echo;\
#       ls -lah . ;\
#       echo;\
#       ls -lah .. ;\
#       echo;\
#       tree . -a -I .git -I .devcontainer -I node_modules;\
#       echo;\
#       tree .. -a -I iac-mesh-pac/.git -I iac-mesh-pac/.devcontainer -I iac-mesh-pac/node_modules;\
#       echo;\
#       echo dbg2.2
#       cd $WORKSPACE;\
#       pwd;\
#       echo;\
#       ls -lah . ;\
#       echo;\
#       ls -lah .. ;\
#       echo;\
#       tree . -a -I .git -I .devcontainer -I node_modules;\
#       echo;\
#       tree .. -a -I iac-mesh-pac/.git -I iac-mesh-pac/.devcontainer -I iac-mesh-pac/node_modules;\
#       echo;\

#   - name: dbg3
#     id: dbg3
#     run: |
#       sudo chown -R $USER:$USER $WORKSPACE/* || true;\
#       echo "-----------------------------------";\
#       echo;\
#       echo dbg3.0
#       git status || true;\
#       echo "whoami = $(whoami)";\
#       echo "groups = $(groups)";\
#       echo "[user_id:group] [$(id -u):$(id -g)]";\
#       cat /etc/passwd | grep $(whoami);\
#       sudo tree -a $WORKSPACE || true;\
#       echo;
#       echo "-----------------------------------";\
#       echo;\
#       echo dbg3.1;\
#       pwd;\
#       echo;\
#       ls -lah . ;\
#       echo;\
#       ls -lah .. ;\
#       echo;\
#       tree . -a -I .git -I .devcontainer -I node_modules;\
#       echo;\
#       tree .. -a -I iac-mesh-pac/.git -I iac-mesh-pac/.devcontainer -I iac-mesh-pac/node_modules;\
#       echo;\
#       echo dbg2.2
#       cd $WORKSPACE;\
#       pwd;\
#       echo;\
#       ls -lah . ;\
#       echo;\
#       ls -lah .. ;\
#       echo;\
#       tree . -a -I .git -I .devcontainer -I node_modules;\
#       echo;\
#       tree .. -a -I iac-mesh-pac/.git -I iac-mesh-pac/.devcontainer -I iac-mesh-pac/node_modules;\
#       echo;\

#   - name: Create Kind Cluster
#     id: kind-create-cluster-cilium
#     run: |
#       set -ex
#       direnv allow
#       sudo docker volume ls
#       sudo docker volume create cilium-control-plane-n01
#       sudo docker volume create cilium-worker-n01
#       sudo docker volume create cilium-worker-n02
#       sudo docker volume ls
#       sudo kind delete cluster --name cilium
#       sleep 5;
#       sudo kind create cluster --name cilium --config hack/kind.yaml --wait 1m || true
#       sudo kind get kubeconfig --name cilium > $KUBECONFIG
#       sleep 30;
#       kubectl --kubeconfig .kube/config get po -owide -A

#     #       -
#     #           name: Provision KinD Cluster
#     #           uses: helm/kind-action@v1.8.0
#     #           with:
#     #               config: hack/kind.yaml
#     #               install_only: true
#     #               cluster_name: cilium
#     #               wait: true

#   - name: Pulumi Setup
#     id: pulumi-up
#     run: |
#       set -ex
#       direnv allow
#       pwd
#       sudo kind get kubeconfig --name cilium > $KUBECONFIG
#       pulumi login --local
#       pulumi stack init iac-mesh-pac
#       pulumi stack select iac-mesh-pac
#       pulumi install
#       pulumi up --yes --skip-preview
#       sleep 30
#       kubectl --kubeconfig .kube/config get po -owide -A
#       sleep 30
#       kubectl --kubeconfig .kube/config get po -owide -A

#   - name: Cilium Status
#     id: cilium-status
#     run: |
#       set -ex
#       direnv allow
#       pwd
#       sudo kind get kubeconfig --name cilium > .kube/config
#       kubectl --kubeconfig .kube/config get po -owide -A
#       cilium status --wait --wait-duration 3m
#       sleep 30
#       kubectl --kubeconfig .kube/config get po -owide -A

#   - name: Cleanup
#     run: |
#       set -ex
#       direnv allow
#       sudo kind delete cluster --name cilium
#       sudo docker volume ls
#       #sudo docker volume rm cilium-control-plane-n01
#       #sudo docker volume rm cilium-worker-n01
#       #sudo docker volume rm cilium-worker-n02
#       #sudo docker volume ls

#       -
#           name: Pulumi Preview
#           uses: pulumi/actions-preview@v1
#           with:
#               stack: iac-mesh-pac
#               command: up
#               args: --yes
#               workdir: pulumi

#       -
#           name: Pulumi Update
#           uses: pulumi/actions-update@v1
#           with:
#               stack: iac-mesh-pac
#               command: up
#               args: --yes --skip-preview
#               workdir: pulumi
